
mes_list = []
gt_list = []

sample_n = 5000
user_list = list(df_like['u'].unique())
sample_list = []

weights = [math.log(len(df_like[df_like['u'] == uni])) for uni in user_list]

if sample_method == 'uniform':
    for i in range(sample_n):
        sample_ = random.sample(user_list, 1)[0]
        sample_list.append(sample_)
else:
    sample_list1 = []
    sample_list2 = []

    sample_imp = int(sample_n * 0.6)
    for i in range(sample_imp):
        sample_ = random.choices(user_list, weights, k=1)[0]
        sample_list1.append(sample_)

    kmeans = KMeans(n_clusters=10, random_state=0).fit(cm_user_emb)
    labels = kmeans.labels_

    counts = np.bincount(labels)
    samples_per_cluster = np.round(counts / counts.sum() * sample_imp).astype(int)

    sampled_ids = []
    for cluster_id, samples in enumerate(samples_per_cluster):
        cluster_ids = np.where(labels == cluster_id)[0]
        sampled_ids.extend(np.random.choice(cluster_ids, samples, replace=True))

    mf_user_i = {value: key for key, value in mf_user.items()}
    sampled_ids = [mf_user_i[_] for _ in sampled_ids]

    sample_list1.extend(sampled_ids)
    occurrences = Counter(sample_list1)
    t_occurrences = {element: 0.95 ** (count - 1) for element, count in occurrences.items()}
    sample_list2 = [t_occurrences[_] for _ in sample_list1]

    sample_list = random.choices(sample_list1, weights=sample_list2, k=sample_n)

for uni in sample_list:
    df = df_like[df_like['u'] == uni]
    df_un = df_dislike[df_dislike['u'] == uni]

    if len(df) > 1:
        '''
        Pairwise Ranking
        '''
        unlikelist = []
        if len(df_un) > 0:
            my_list = df_un['i'].tolist()
            random.shuffle(my_list)
            my_list = [int(x) for x in my_list]
            unlikelist = my_list[:10]

        my_list = df['i'].tolist()
        random.shuffle(my_list)
        my_list = [int(x) for x in my_list]

        if len(df) > 55:
            topk = 50
        else:
            topk = len(df) - 3
        trainlist = my_list[:topk]
        testlist = my_list[-1:]
        neglist = []
        while len(neglist) < 1:
            rn = random.sample(movie_id_list, 1)[0]
            if not rn in my_list:
                neglist.append(rn)

        random_n = (random.random() > 0.5)

        historical_interactions = [f'"{movie_name_dict[i]}"' for i in trainlist]
        false_items_set = [f'"{movie_name_dict[i]}"' for i in neglist]
        answer_items_set = [f'"{movie_name_dict[i]}"' for i in testlist]

        try:
            xx = cm_item[str(neglist[0])]
            yy = cm_item[str(testlist[0])]
            uu = cm_user[str(uni)]
            if cm_pred[uu][yy] > cm_pred[uu][xx]:
                cm_lable = 'Yes.'
            else:
                cm_lable = 'No.'
        except Exception:
            cm_lable = 'Unknown.'

        unlikelist = [x_ for x_ in unlikelist if x_ in movie_name_dict.keys()]

        user_unpre = [f'"{movie_name_dict[i]}"' for i in unlikelist]

        if len(unlikelist) < 3:
            user_unpre = 'None.'
        else:
            user_unpre = ', '.join(user_unpre)

        historical_interactions = ', '.join(historical_interactions)
        gt_list.append(movie_name_dict[testlist[0]])

        if random_n:
            first_name = answer_items_set[0]
            second_name = false_items_set[0]
            tg = 'Yes.'
        else:
            first_name = false_items_set[0]
            second_name = answer_items_set[0]
            tg = 'No.'

            if cm_lable == 'Yes.':
                cm_lable = 'No.'
            elif cm_lable == 'No.':
                cm_lable = 'Yes.'

        instruct0 = f'''You are a {kws} recommender system. Based on a user's likes and dislikes, determine if they would prefer one {kws} over another. Respond only with "Yes." or "No.".\n\n'''

        instruct1 = f'''User's Liked {kws}s: <historical interactions>. \nUser's Disliked {kws}s: <user_unpre>\n\nQuestion: Would the user prefer <movie1> over <movie2>?\n'''
        instruct2 = '''Hint: Another recommender system suggests the answer is "<cm_result>"'''
        if isHint:
            instruct1 = instruct1 + instruct2
        instruct1 = instruct1.replace('<historical interactions>', historical_interactions).replace('<user_unpre>',
                                                                                                    user_unpre).replace(
            '<movie1>', first_name).replace('<movie2>', second_name).replace('<cm_result>', cm_lable)

        fi = {'messages': [
            {"role": "system", "content": [{"type": "text", "content": ""}]},
            {"role": "user", "content": [{"type": "text", "content": instruct0 + instruct1}]},
            {"role": "assistant", "content": [{"type": "text", "content": 'Answer: ' + tg}]}
        ]}
        mes_list.append(fi)

# Write the output to a JSON Lines file
with jsonlines.open('/nfs/RecRanker/llm_recommender/Prediction/data.jsonl', mode='a') as writer:
    writer.write_all(mes_list)
